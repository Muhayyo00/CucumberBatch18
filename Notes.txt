Class 1 -

Cucumber -

Cucumber - cucumber is a tool
Gherkin - gherkin is a language
BDD - BDD is an approach (behavioral driven development)/behavior means the functions/functionality

*IMPORTANT NOTE*
cucumber is a tool which allows us to write gherkin language that helps us implement BDD approach in test automation.

whenever we write BDD scenarios, we will write from end user point of view.//imperative approach of writing
test cases-writing from third-person singular

Given - pre-condition
when - performing actions
Then - expected result
And - supporting tag

every test case in cucumber will be considered as scenario.

framework-is a set of guidelines or rules used in creating and designing test cases.
Hybrid framework-when Behavioral Driver Development is used along with a Data Driver Development

why framework - because with framework we can execute one specific/all/couple of scenarios out of thousands.

When working with Selenium:
no reporting structure in selenium
no proper execution point
no proper segregation of screens of the application

Creating a project for Cucumber:
Advanced settings have:
1. group id  - org.syntax(is same as project name. The moment you put the group id, the name will be same)
   org.Syntax-means the company(org) and the name of the company (Syntax, amazon...)
2. artifact id - CucumberBatch18 (project name in that organization)

under src - we have 2 folders
main - developing the application
test - test the application

delete main - we don't need it
 in test - we need 2 things

 technical things - java package
 nontechnical things - resources package

 the end goal is to test the application
 functional testing - UI (User Interface)

Given user is navigated to HRMS application
When user enters admin username and password
And user clicks on login button
Then user is successfully logged in

User story - search an employee in HRMS
Scenario 1 - search employee by ID
Scenario 2 - search employee by name

Java Jar-creates a support library that you need to use Java
Maven Repository-in Maven everything is available for you to download to run your programs(Java, Selenium, Cucumber)
Dependency-is used to connect local machine to the Maven Repository

under disk C, in our local machine /in user folder, we have .m2 folder where all the repositories are available

Class 2-

recap -
Cucumber allows us to write scenarios in gherkin language
as a maven project, we created the framework skeleton

main
test - here we write code to test the application
java - for all the technical parts
resources - for all the non-tech parts

feature file - in this, we write scenarios
steps package - to keep all step definitions

utils  package is for all the utility classes

We need to control the flow of execution
to execute all the test cases
to execute some of the test cases
to execute one of the test cases

***** Junit is the parent of SetNG and Java ******

class 3-
recap-

runner class
we need junit to work with cucumber
cucumber options-
features-the path of feature directory to execute all the TC's(test cases) in one go
glue-the path of the steps package, runner class will find all the step definitions here
dry run-if we set it to true, it will stop actual execution and scans all the step if any step is missing,
it will give me step definition for that step. If we set it to false, then again execution will start.
tags-when we need to execute specific group of test cases or any specific TC, we use tags.
There is no limitation of using tags in scenarios.
If I want to execute scenarios based on 2 conditions,


class 4-
recap--
runner class- we need a runner class to control the flow of execution. When I need to execute one of the,
of several of them, or the whole class
cucumber options-

features-

glue-
dryRun-
tags-
plugin-pretty-it prints all the step definitions in console
common methods-we have all common methods

hooks-we will write the pre-condition and post condition here
hooks class will always be in steps package
@before tag for pre-condition
@after tag for post-condition
background-in background, we write all the steps in feature file, which is common in all the scenarios.
Once the flow is broken, we cannot write the steps in the background and it does not matter how many steps
are common after the flow is broken. We cannot write them in background, because the flow is broken.
Background is limited to one feature file, it means every feature file background will be different.
hooks vs background
Hooks are applicable for all the feature files
Background is applicable for one feature file
flow of execution first: First hooks will execute, second background and third scenario will execute

Data Driven Testing(DDT)-when your one scenario is executing against multiple sets of data our framework is hybrid-it supports BDD and DDT


class 5-
recap-

we can pass data from feature file in terms of parameters "data value", it will be considered
as a parameter.

we can achieve Data Driven Testing using feature file. We use example table with scenario outline to
pass multiple sets of data.

hooks- will execute as many times as data sets
background- based on number of data set
scenario-based on the number of data set

Assertions-in cucumber we use junit assertions.The main functions of assertions are checking validation of webelements and
checking their location. In assertion, we perform 2 things: true and equals.

true-checks the existence of the element/text/field
equals-checks the exact value of the element

Verification-when you read the documentation, without access to app, system and playing with functions
Validation-when you deal with actual system, play with functions and elements.
POM-page object model design pattern.
as per this design, we have a class for each page available in website. We will keep locators for this page
in the respective class.
 login page locators will be in login-page class and so on. We call these locators as object repositories.

First, create page class and add object repository
then, create the constructor and call page factory
then create the object of the class in page initializer class
then comment out previous web element and call objects with web elements

Approaches in passing the data:
1.Hard-coded approach, where you manually write the code
2.Use pass the code through the config.properties files
3.pass the data through feature file in terms of parameters
4.achieve data driven testing using feature file with the help of a data table using scenario outline





